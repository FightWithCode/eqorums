"""
Django settings for demo project.
Changes from Server
Generated by 'django-admin startproject' using Django 2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
from decouple import config
from datetime import timedelta
from celery.schedules import crontab
# from dashboard import tasks


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
TEMPLATES_DIR = os.path.join(BASE_DIR, 'templates')
STATICFILES = os.path.join(BASE_DIR, 'static')
os.environ['OAUTHLIB_INSECURE_TRANSPORT'] = '1'
os.environ['OAUTHLIB_RELAX_TOKEN_SCOPE'] = '0'


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', cast=bool)

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',

    'rest_framework',
    'rest_framework.authtoken',
    'drf_api_logger',
    'dbbackup',
    'storages',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.linkedin_oauth2',

    'knox',
    'channels',

    'corsheaders',
    'websockets',
    'clients',
    'candidates',
    'openposition',
    'dashboard',
    "hiringgroup",
    "schedules"
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'knox.auth.TokenAuthentication',
        'django_cognito_jwt.JSONWebTokenAuthentication'
    ]
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    # 'django.contrib.auth.middleware.RemoteUserMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'drf_api_logger.middleware.api_logger_middleware.APILoggerMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'demo.custom_middlewares.UserLogMiddleware'
]

ROOT_URLCONF = 'demo.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'emailtemplates'), TEMPLATES_DIR],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'demo.wsgi.application'

ASGI_APPLICATION = 'demo.routing.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': config('DB_NAME'),
        'USER': config('DB_USER'),
        'PASSWORD': config('DB_PASSWORD'),
        'HOST': config('DB_HOST'),
        'PORT': '',
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

USE_I18N = True

USE_L10N = True

USE_TZ = False

TIME_ZONE = 'EST'

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    STATICFILES,
]

STATIC_ROOT = os.path.join(BASE_DIR, "static_root")

MEDIA_URL = 'api/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media_root')

CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = True
CORS_ORIGIN_WHITELIST = [
    'http://localhost:4200',
]

CORS_ORIGIN_REGEX_WHITELIST = [
    'http://localhost:4200',
]

REST_KNOX = {
    # 'MIN_REFRESH_INTERVAL': 300, #86400
    'TOKEN_TTL': timedelta(hours=24),
}

SITE_ID = 7

ACCOUNT_EMAIL_VERIFICATION = "none"
ACCOUNT_EMAIL_REQUIRED = (True)

SOCIALACCOUNT_PROVIDERS = {
    'linkedin': {
        'SCOPE': [
            'r_basicprofile',
            'r_emailaddress'
        ],
        'PROFILE_FIELDS': [
            'id',
            'first-name',
            'last-name',
            'email-address',
            'picture-url',
            'public-profile-url',
        ]
    }
}

# AUTHENTICATION_BACKENDS = [
#     'django.contrib.auth.backends.RemoteUserBackend',
#     'django.contrib.auth.backends.ModelBackend',
# ]

# Email Settings
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = config('EMAIL_HOST')
EMAIL_USE_TLS = config('EMAIL_USE_TLS')
EMAIL_PORT = config('EMAIL_PORT')
EMAIL_HOST_USER = config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')

FLEX_BOOKER_ID = config('FLEX_BOOKER_ID')
FLEX_BOOKER_SECRET = config('FLEX_BOOKER_SECRET')
FLEX_BOOKER_LINK = config('FLEX_BOOKER_LINK')

ZOOM_CLIENT_ID = config('ZOOM_CLIENT_ID')
ZOOM_CLIENT_SK = config('ZOOM_CLIENT_SK')
ZOOM_ENCODE = config('ZOOM_ENCODE')

SECURE_SSL_REDIRECT = False

DATE_INPUT_FORMATS = ['%m-%d-%Y']

# SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
# SECURE_SSL_REDIRECT = True
# SESSION_COOKIE_SECURE = True
# CSRF_COOKIE_SECURE = True

# SECURE_HSTS_SECONDS = 30  # Unit is seconds; *USE A SMALL VALUE FOR TESTING!*
# SECURE_HSTS_PRELOAD = True
# SECURE_HSTS_INCLUDE_SUBDOMAINS = True
# SECURE_REFERRER_POLICY = "strict-origin-when-cross-origin"

# MIDDLEWARE += ["csp.middleware.CSPMiddleware"]

# SECURE_HSTS_SECONDS = 2_592_000  # 30 days

# Webpush Notification Settings
WEBPUSH_SETTINGS = {
   "VAPID_PUBLIC_KEY": "BPrvdT2aZn3Jc6JDQ_5Q6rl84Z4NPXCpknPpZ9_oSOtSJ21mgjj4B9kQ6Rgbv7Bsr4XiBoqNT_UdkXYMiItgnr4",
   "VAPID_PRIVATE_KEY": "l_mCdvLM-PT5a9YbEumg16eWIuhqO2jx5Y2flFrTWyk",
   "VAPID_ADMIN_EMAIL": "pk2425693@gmail.com"
}

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [os.environ.get("REDIS_URL", 'redis://localhost:6379')],
        },
    },
}

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Celery and Redis Settings
CELERY_BROKER_URL = "redis://localhost:6379"
CELERY_RESULT_BACKEND = "redis://localhost:6379"


# Scheduled Celery Tasks
CELERY_BEAT_SCHEDULE = {
    "send_interview_reminder": {
        "task": "dashboard.tasks.send_interview_reminder",
        "schedule": crontab(minute="*/1"),
    },
    "daily_interview_reminder": {
        "task": "dashboard.tasks.daily_interview_reminder",
        "schedule": crontab(minute=0, hour=0),
    },
    "delete_interview": {
        "task": "dashboard.tasks.delete_interview",
        "schedule": crontab(minute="*/1"),
    },
    "increase_deadline": {
        "task": "dashboard.tasks.increase_deadline",
        "schedule": crontab(minute="*/1"),
    },
}


# Proxy Curl Token
PROXYCURL_TOKEN = 'X4mCzLTOunzQkGE7w1TANg'

# Zoho Creds
ZOHO_REFRESH_TOKEN_ACC=config('ZOHO_REFRESH_TOKEN_ACC')
ZOHO_REFRESH_TOKEN=config('ZOHO_REFRESH_TOKEN')
ZOHO_CLIENT_ID=config('ZOHO_CLIENT_ID')
ZOHO_CLIENT_SECRET=config('ZOHO_CLIENT_SECRET')
ZSOID=config('ZSOID')
ZOHO_EMAIL=config('ZOHO_EMAIL')
COGNITO_AWS_REGION = config('COGNITO_AWS_REGION')
COGNITO_USER_POOL = config('COGNITO_USER_POOL')
COGNITO_AUDIENCE = config('COGNITO_AUDIENCE')

FILE_UPLOAD_MAX_MEMORY_SIZE = 50 * 1024 * 1024

IOTUM_EMAIL = config('IOTUM_EMAIL')
IOTUM_PASSWORD = config('IOTUM_PASSWORD')
IOTUM_BASE_URL = config('IOTUM_BASE_URL')
IOTUM_PASSWORD_RAN = config('IOTUM_PASSWORD_RAN')

DOMAIN = config('DOMAIN')

DRF_API_LOGGER_DATABASE = True

DRF_API_LOGGER_EXCLUDE_KEYS = ['password', 'token', 'access', 'refresh']

DRF_API_LOGGER_SLOW_API_ABOVE = 200

DRF_API_LOGGER_METHODS = ['POST', 'DELETE', 'PUT']

AWS_ACCESS = config('AWS_ACCESS')
AWS_SECRET = config('AWS_SECRET')
AWS_ACCESS_KEY = config('AWS_ACCESS_KEY')
AWS_SECRET_KEY = config('AWS_SECRET_KEY')
DBBACKUP_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
DBBACKUP_STORAGE_OPTIONS = {
    'access_key': config('AWS_ACCESS'),
    'secret_key': config('AWS_SECRET'),
    'bucket_name': 'qorums-backups',
}
STRIPE_SECRET_KEY = config("STRIPE_SECRET_KEY")
STRIPE_KEY = config("STRIPE_KEY")
STIPE_PRICES = {
    "starter": config("STARTER_PRICING"),
    "growth": config("GROWTH_PRICING"),
    "enterprise": config("ENTERPRISE_PRICING"),
}

EXAMPLE_POSITION = config("EXAMPLE_POSITION")

# AWS S$ Bucket settings
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage' 
# DEFAULT_FILE_STORAGE = 'demo.storage_backends.PublicMediaStorage'
AWS_ACCESS_KEY_ID = config('AWS_ACCESS')
AWS_SECRET_ACCESS_KEY = config('AWS_SECRET')
AWS_STORAGE_BUCKET_NAME = "estaging-media"
AWS_QUERYSTRING_AUTH = False
